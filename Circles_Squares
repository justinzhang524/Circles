# Author: Justin Zhang 
# Objected Oriented Programming 
# 1/18/2019

# I created a separate class called "Squares" which enables the creation of squares
# that behaves in the same way as circles.


import random

game_objects = []

class Circle:
    def __init__(self, x, y):
        '''Create a new circle at the given x,y point with a random speed,
        color, and size.'''

        self.x = x
        self.y = y
        self.x_speed = random.randint(-5,5)
        self.y_speed = random.randint(-5,5)
        self.color = color(random.randint(0,255),
                           random.randint(0,255),
                           random.randint(0,255))
        self.size = random.randint(5,75)

    def update(self):
        '''Update current location by speed.'''
        self.x += self.x_speed
        self.y += self.y_speed
        
        '''Enable self to bounce back while it hits the boundary'''
        if self.x > 400-self.size/2 or self.x <0+self.size/2:
            self.x_speed = -1*self.x_speed
            
        if self.y > 400-self.size/2 or self.y <0+self.size/2:
            self.y_speed = -1*self.y_speed
            
    def draw(self):
        '''Draw self on the canvas.'''

        fill(self.color) # set shape color
        stroke(0,0,0) # add a black outline
        ellipse(self.x, self.y, self.size, self.size)

class Square:
    def __init__(self, x, y):
        '''Create a bew sqyare at tge guveb x,y point with a random speed, 
        color, and size.'''
        
        self.x = x
        self.y = y
        self.x_speed = random.randint(-5,5)
        self.y_speed = random.randint(-5,5)
        self.color = color(random.randint(0,255),
                           random.randint(0,255),
                           random.randint(0,255))
        self.length = random.randint(5,75)    
                
    def update(self):
        '''Update current location by speed.'''

        self.x += self.x_speed
        self.y += self.y_speed
        
        '''Enable self to bounce back while it hits the boundary'''
        if self.x > 400-self.length or self.x <0:
            self.x_speed = -1*self.x_speed
            
        if self.y > 400-self.length or self.y <0:
            self.y_speed = -1*self.y_speed

    def draw(self):
        '''Draw self on the canvas.'''

        fill(self.color) # set shape color
        stroke(0,0,0) # add a black outline
        rect(self.x, self.y, self.length, self.length)

def addSquare():
    '''Add a new square.'''

    global game_objects
    game_objects.append(Square(mouseX, mouseY))

def addCircle():
    '''Add a new circle where the user clicked.'''

    global game_objects
    game_objects.append(Circle(mouseX, mouseY))


def reset():
    '''Clear all game objects.'''

    global game_objects
    game_objects = []


def setup():
    size(400, 400)


def draw():
    '''Clear the screen, have all game objects update and redraw.'''

    global game_objects
    
    background(255, 255, 255) # draw a white background
    
    '''Enable each game object to do its action (aka update and draw)'''
    for game_object in game_objects:
        game_object.update()
        game_object.draw()
    

def keyPressed():
    if key == 's':
        addSquare()
    if key == 'c':
        addCircle()
    if key == 'r':
        reset()
